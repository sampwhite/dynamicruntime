// IntelliJ supplied entries.
plugins {
    id 'groovy'
    id 'java'
    //id 'org.jetbrains.kotlin.jvm' version '1.2.70'
}

// Who we are.
group 'dynamicruntime'

// We do not package *jar* files, our deployment runs from source, so our version is our git commit label,
// not this entry.
version '1.0-SNAPSHOT'

// Ubuntu's Java 11 is actually Java 10 that has been labelled as 11. But toolchains using Java are not fooled.
sourceCompatibility = 1.10

// Because we are pure open source, no complications in our repository usage.
repositories {
    mavenCentral()
}

dependencies {
    // Kotlin pulls in jetbrains annotations as well (such as @NotNull). Currently not used
    // because IntelliJ has problems with Kotlin and Java 1.10.
    //compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // We use groovy to launch, test, and execute scripts.
    compile 'org.codehaus.groovy:groovy-all:2.5.4'
    // Simple lightweight HTTP server.
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.14.v20181114'
    // Writing our own servlet implementation so *not* including this.
    //compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.14.v20181114'

    // Use a simple Json library.
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // Bring in log4j2 to do logging.
    compile group: 'org.apache.logging.log4j', name: 'log4j', version: '2.11.1'
    // Bring in backward compatibility for 3rd party libraries that do logging.
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.1'
    // Bring in slf4j -> log4j2 bridge for jetty that uses slf4j.
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    // Useful utilities from Apache.
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    // More useful utilities from Apache.
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    // The Apache way of doing HTTP, robust and reliable. Also has useful utility methods.
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    
    // Current Apache endorsed page templating (for emails and such).
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.28'
    
    // Bring in *yaml* support. Our config file format of choice.
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'

    // We are using AWS Aurora Postgres, so we use a postgres connector.
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    // Database to be used for unit testing and when running code in simulation mode.
    compile group: 'com.h2database', name: 'h2', version: '1.4.197'

    // Bring in *markdown* conversion to HTML support.
    compile 'com.atlassian.commonmark:commonmark:0.12.1'

    // We use Groovy to do tests. Using a dynamic (not static compiled) language on top of 
    // Java makes test writing easier and produces better presentations in results. 
    // Spock expands on that approach and adds additional language features specific to testing.
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.5'

}

sourceSets {
    /** Source code is split across multiple directories, currently only *core* and *common*, but eventually
     * more. A simple way to create the *multi-component* composite structure to the source code. */
    main {
        java {
            srcDirs = ['core/src/main/java', 'common/src/main/java']
        }
        /*
        kotlin {
            srcDirs = ['core/src/main/kotlin', 'common/src/main/kotlin']
        }*/
        groovy {
            srcDirs = ['launch/entrypoints']
        }
        resources {
            srcDirs = ['core/src/main/resources', 'common/src/main/resources']
        }
    }
    test {
        groovy {
            srcDirs = ['core/src/test/groovy', 'common/src/test/groovy']
        }
        resources {
            srcDirs = ['core/src/test/resources', 'common/src/test/resources']
        }
    }
}

/*
// IntelliJ magic entries.
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}*/

// Boilerplate task to start the server.
task execute(type:JavaExec) {
    main = findProperty('mainClass') ?: 'start.StartAll'
    workingDir = System.getProperty("user.dir")
    // Make sure executable does not use up all the memory on a 1 GIG AWS node.
    jvmArgs = ['-Xmx512m']
    classpath = sourceSets.main.runtimeClasspath
}