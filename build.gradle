plugins {
    id 'groovy'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.51'
}

group 'dynamicruntime'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.10

repositories {
    mavenCentral()
}

dependencies {
    // Kotlin pulls in jetbrains annotations as well (such as @NotNull).
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // We use groovy to launch, test, and execute scripts.
    compile 'org.codehaus.groovy:groovy-all:2.5.4'
    // Simple lightweight HTTP server.
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.14.v20181114'
    //compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.14.v20181114'

    // Use a simple Json library.
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // Bring in log4j2
    compile group: 'org.apache.logging.log4j', name: 'log4j', version: '2.11.1'
    // Bring in backward compatibility for 3rd party libraries.
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.1'
    // Bring in slf4j -> log4j2 bridge for jetty that uses slf4j.
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    
    // Bring in *yaml* support.
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'

    // We use Groovy to do tests. Using a dynamic (not static compiled) language on top of 
    // Java makes test writing easier and produces better presentations in results. 
    // Spock expands on that approach and adds additional language features specific to testing.
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.5'

}

sourceSets {
    main {
        java {
            srcDirs = ['core/src/main/java', 'common/src/main/java']
        }
        kotlin {
            srcDirs = ['core/src/main/kotlin', 'common/src/main/kotlin']
        }
        groovy {
            srcDirs = ['launch/entrypoints']
        }
        resources {
            srcDirs = ['core/src/main/resources', 'common/src/main/resources']
        }
    }
    test {
        groovy {
            srcDirs = ['core/src/test/groovy', 'common/src/test/groovy']
        }
        resources {
            srcDirs = ['core/src/test/resources', 'common/src/test/resources']
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.10"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.10"
}

task execute(type:JavaExec) {
    main = findProperty('mainClass') ?: 'StartAll'
    classpath = sourceSets.main.runtimeClasspath
}