package org.dynamicruntime.httpclient;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpRequestBase;
import org.dynamicruntime.context.DnCxt;

import java.util.Date;
import java.util.Map;

@SuppressWarnings("WeakerAccess")
public class DnHttpRequest {
    public final DnCxt cxt;
    public final String method;
    public final String uri;

    public String authType = "Basic";
    public String username;
    public String password;

    public Map<String,Object> args;
    public boolean useFormEncoded = false;
    public Map<String,Object> values;
    /** Whether a binary response is expected. If so, we let the caller deal with reading the input stream. */
    public boolean isBinary = false;

    /** Whether to attempt generating responseData. */
    public boolean hasJsonResponse = true;

    /** Artifacts generated by request. */
    public HttpRequestBase activeRequest;
    public Date startDate = new Date();
    public int numAttempts;
    public CloseableHttpResponse response;
    public int respCode;
    public boolean isSuccess;
    public String responseStr;
    public Map<String,Object> responseData;

    public DnHttpRequest(DnCxt cxt, String method, String uri) {
        this.cxt = cxt;
        this.method = method;
        this.uri = uri;
    }

    @SuppressWarnings("unused")
    public DnHttpRequest auth(String username, String password) {
        this.username = username;
        this.password = password;
        return this;
    }

    public DnHttpRequest args(Map<String,Object> args) {
        this.args = args;
        return this;
    }

    @SuppressWarnings("unused")
    public DnHttpRequest useFormEncoded(boolean useFormEncoded) {
        this.useFormEncoded = useFormEncoded;
        return this;
    }

    public DnHttpRequest values(Map<String,Object> values) {
        this.values = values;
        return this;
    }

    public long duration(Date now) {
        return now.getTime() - startDate.getTime();
    }

    public DnHttpRequest clone() {
        // Clone only the parts that do not change after being put into synchronized tracking.
        var retVal = new DnHttpRequest(cxt, method, uri);
        retVal.authType = authType;
        retVal.username = username;
        retVal.args = args;
        retVal.useFormEncoded = useFormEncoded;
        retVal.values = values;
        retVal.activeRequest = activeRequest;
        retVal.startDate = startDate;
        return retVal;
    }

    @Override
    public String toString() {
        String cxtStr = cxt != null ? cxt.getLogInfo() : "noCxtLog";
        return cxtStr + " " + method + ":" + uri;
    }
}
